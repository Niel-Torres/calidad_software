
import org.ajoberstar.grgit.*

def cucumberVersion = "1.2.0"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
		classpath 'org.ajoberstar:gradle-git:1.4.2'
    }
}

dependencies {
	testCompile 'junit:junit:4.11'
	testCompile "info.cukes:cucumber-junit:$cucumberVersion"
	testCompile "info.cukes:cucumber-java:$cucumberVersion"
}

allprojects {
    repositories {
        jcenter()
    }
}

configurations {
	cucumberRuntime {
		extendsFrom testRuntime
	}
}

task cucumber() {
	dependsOn assemble, compileTestJava
	doLast {
		javaexec {
			main = "cucumber.api.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = ['--plugin', 'pretty', '--glue', 'com.ps.comunio.comuniops', 'app\src\test\java\com\example\grupo7\comunio']
		}
	}
}
build.dependsOn cucumber

task clean(type: Delete) {
    delete rootProject.buildDir
}

task clone {
	doLast{
		Grgit.clone(dir: './proyecto', uri: 'https://github.com/nieltorres/calidad_software.git')
		print "Repositorio clonado"
	}
}

task pull {
	doLast{
		def repo = Grgit.open(project.file('.'))
		repo.pull()
		print "Repositorio actualizado"
	}
}

task push {
	doLast{
		def i = 0
		def rama = 'gradle'
		def repo = Grgit.open(project.file('.'))
		def ramas = repo.branch.list()
		while(ramas.size()>i){
			if(ramas.get(i).getName()==rama){
				repo.branch.remove(names: [rama], force:true)
			}
			i++
		}
		repo.checkout(branch: rama, createBranch: true)
		if(project.hasProperty("comentario")){
			repo.commit(message: comentario, all: true)
		}else{
			repo.commit(message: 'actualizacion', all: true)
		}
		repo.push()
		repo.checkout(branch: 'master')
		print "Repositorio remoto modificado"
	}
}